USE Pitson
GO

--===============================================================================
-- Procedure qui permet de créer une nouvelle machine dans la base
-- @libellePresse est le nom de la presse de la machine à créer
-- @idCree en retour est l'id de la machine créée, qui vaut -1 si erreur.
-- @message est le message retour
-- Code retour :
--			0. OK
--			1. Paramètre d'entrée à valeur nulle ou incohérente
--			2. Identifiant machine existant
--			3. Exception
--===============================================================================
CREATE PROC sp_creerMachine @libellePresse TypeNomPresse, @iDcree INT output, @messageRetour TypeMessageRetour output
AS
DECLARE @codeRetour Tinyint;

BEGIN TRY
	BEGIN
		SET @iDcree = -1 ;
		IF @libellePresse IS NULL OR @libellePresse = ''
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'Nom de la presse nul ou vide.';
		END
		ELSE IF EXISTS (SELECT libellePresse FROM Machine WHERE libellePresse = @libellePresse)
		BEGIN
			SET @codeRetour = 2 ;
			SET @messageRetour = 'Nom de la presse déjà existant.';
		END
		ELSE
		BEGIN
		-- Par défaut lors de la création de la machine, le BIT En service vaut 1
			INSERT INTO Machine (libellePresse, enService) VALUES (@libellePresse, 1);
			SET @codeRetour = 0 ;
			SET @messageRetour = 'Machine "' + @libellePresse + '" ajoutée dans la table avec succès.';
			SET @iDcree = (SELECT idPresse FROM MACHINE WHERE libellePresse = @libellePresse) ;
		END
	END
END TRY
BEGIN CATCH
	SET @messageRetour = 'Erreur base de données : ' + ERROR_MESSAGE() ;
	SET @codeRetour = 3 ;
END CATCH

RETURN @codeRetour;
GO


--===============================================================================
-- Procedure qui permet de supprimer une machine dans la base
-- @idPresse est le nom de la machine à supprimer
-- @messageRetour est le message retour
-- Code retour :
--			0. OK
--			1. Paramètre d'entrée à valeur nulle ou incohérente
--			2. Identifiant machine non reconnu
--			3. Machine encore liée à une autre table
--			4. Exception
--===============================================================================
CREATE PROC sp_supprimerMachine @idPresse INT, @messageRetour TypeMessageRetour output
AS
DECLARE @codeRetour Tinyint;

BEGIN TRY
	BEGIN
		IF @idPresse IS NULL OR @idPresse <= 0
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'ID presse nul ou négatif.';
		END
		ELSE IF NOT EXISTS (SELECT idPresse FROM Machine WHERE idPresse = @idPresse)
		BEGIN
			SET @codeRetour = 2 ;
			SET @messageRetour = 'Cette presse n''existe pas dans la table.';
		END
		ELSE IF EXISTS (SELECT idPresse FROM Lot WHERE idPresse = @idPresse)
		BEGIN
			SET @codeRetour = 3 ;
			SET @messageRetour = 'Cette presse est encore liée à des lots existants.';
		END
		ELSE
		BEGIN
			DELETE FROM Machine
			WHERE idPresse = @idPresse ;
			SET @codeRetour = 0 ;
			SET @messageRetour = 'Machine "' + @idPresse + '" supprimée de la table avec succès.';
		END
	END
END TRY
BEGIN CATCH
	SET @messageRetour = 'Erreur base de données : ' + ERROR_MESSAGE() ;
	SET @codeRetour = 4 ;
END CATCH

RETURN @codeRetour;
GO

--===============================================================================
-- Procedure qui permet de renommer une machine dans la base
-- @idPresseARenommer est le nom de la machine à renommer
-- @nouveauNom est le nouveau nom à affecter à la machine
-- @messageRetour est le message retour
-- Code retour :
--			0. OK
--			1. Paramètre d'entrée à valeur nulle ou incohérente
--			2. Identifiant machine non reconnu
--			3. Nouveau nom déjà existant
--			4. Exception
--===============================================================================
CREATE PROC sp_renommerMachine @idPresseARenommer INT, @nouveauNom TypeIDModele, @messageRetour TypeMessageRetour output
AS
DECLARE @codeRetour Tinyint;

BEGIN TRY
	BEGIN
		IF @idPresseARenommer IS NULL OR @idPresseARenommer <= 0
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'Numéro de presse à renommer nul ou négatif.';
		END
		ELSE IF @nouveauNom IS NULL OR @nouveauNom = ''
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'Nouveau nom de presse nul ou vide.';
		END
		ELSE IF NOT EXISTS (SELECT idPresse FROM Machine WHERE idPresse = @idPresseARenommer)
		BEGIN
			SET @codeRetour = 2 ;
			SET @messageRetour = 'La presse à renommer n''existe pas dans la table.';
		END
		ELSE IF EXISTS (SELECT idPresse FROM Machine WHERE libellePresse = @nouveauNom)
		BEGIN
			SET @codeRetour = 3 ;
			SET @messageRetour = 'Le nouveau nom à affecter à la presse existe déjà dans la table.';
		END
		ELSE
		BEGIN
			UPDATE Machine
			SET libellePresse = @nouveauNom
			WHERE idPresse = @idPresseARenommer ;
			SET @codeRetour = 0 ;
			SET @messageRetour = 'Presse ' + @idPresseARenommer + ' renommée "' + @nouveauNom + '" avec succès.';
		END
	END
END TRY
BEGIN CATCH
	SET @messageRetour = 'Erreur base de données : ' + ERROR_MESSAGE() ;
	SET @codeRetour = 4 ;
END CATCH

RETURN @codeRetour;
GO


--===============================================================================
-- Procedure qui permet changer le statut d'une machine (obsolète ou non)
-- @idPresse est le nom de la machine à updater
-- @statut est le statut à affecter à la machine (0 en service, 1 hors service)
-- @messageRetour est le message retour
-- Code retour :
--			0. OK
--			1. Paramètre d'entrée à valeur nulle ou incohérente
--			2. Identifiant machine non reconnu
--			3. Machine en cours de production d'un lot
--			4. Exception
--===============================================================================
CREATE PROC sp_changerStatutMachine @idPresse INT, @enService TINYINT, @messageRetour TypeMessageRetour output
AS
DECLARE @codeRetour Tinyint;

BEGIN TRY
	BEGIN
		IF @idPresse IS NULL OR @idPresse <= 0
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'Nom de la presse à mettre à jour nul ou vide.';
		END
		ELSE IF @enService IS NULL OR (@enService <> 0 AND @enService <> 1)
		BEGIN
			SET @codeRetour = 1 ;
			SET @messageRetour = 'Le statut à affecter est nul ou du mauvais format.';
		END
		ELSE IF NOT EXISTS (SELECT idPresse FROM Machine WHERE idPresse = @idPresse)
		BEGIN
			SET @codeRetour = 2 ;
			SET @messageRetour = 'La presse à mettre à jour n''existe pas dans la table.';
		END
		ELSE IF EXISTS (SELECT idLot FROM Lot WHERE etatProduction = 'EnCours' AND idPresse = @idPresse)
		BEGIN
			SET @codeRetour = 3 ;
			SET @messageRetour = 'Il y a des lots en cours de production sur cette presse.';
		END
		ELSE
		BEGIN
			UPDATE Machine
			SET enService = @enService
			WHERE idPresse = @idPresse ;
			SET @codeRetour = 0 ;
			SET @messageRetour = 'Statut de la presse ' + @idPresse + ' mis à jour avec succès.';
		END
	END
END TRY
BEGIN CATCH
	SET @messageRetour = 'Erreur base de données : ' + ERROR_MESSAGE() ;
	SET @codeRetour = 4 ;
END CATCH

RETURN @codeRetour;
GO
